(*
Mainscreen
==========

The mainscreen file holds functions and procedures that are used in the
Runescape lobby mainscreen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/mainscreen.simba>`_.

*)

{$include_once minimap.simba}
{$include_once chatbox.simba}
{$include_once gametabs/gametab.simba}
{$include_once actionbar.simba}
{$include_once ../utilities/pixelshift.simba}
{$include_once ../utilities/color.simba}

{$f-}

(*
const Angle
~~~~~~~~~~~

Constants that represent the possible angles of the mainscreen.

Example:

.. code-block:: pascal

    mainscreen.setAngle(MS_ANGLE_HIGH);
*)
const
  MS_ANGLE_HIGH  = 0;
  MS_ANGLE_LOW   = 1;
  MS_ANGLE_NONE  = 2;

(*
type TRSMainscreen
~~~~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape main screen.
*)
type
  TRSMainscreen = record(TRSInterface)
    __placeholder: byte;
  end;

(*
var mainscreen
~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape mainscreen.

Example:

.. code-block:: pascal

    if (mainscreen.isPlayerAnimating()) then
      writeln('Player is doing something');
*)
var
  mainscreen: TRSMainscreen;

{*
TRSMainscreen.__init()
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.__init();

Initiates the mainscreen variable. Called at the end of this file.

.. note::

    - by Coh3n
    - Last updated: Mar. 10, 2013 by Coh3n

Example:

.. code-block:: pascal

    mainscreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSMainscreen.__init();
begin
  with self do
  begin
    name := 'RS Mainscreen';
    ID := ID_INTERFACE_MAINSCREEN;
    parentID := -1;
    static := true;
  end;
end;
{$ENDIF}

{*
TRSMainscreen.__find
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.__find(): boolean;

Sets the mainscreen's bounds to the size of the RS client.  This is because the 
mainscreen take up the entire client, and the other interfaces are rendered on
top.

.. note::

    - by Coh3n
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    mainscreen.__find();
*}
{$IFNDEF CODEINSIGHT}
function TRSMainscreen.__find(): boolean;
var
  wid, hei: integer;
  bds: TBox;
begin
  getClientDimensions(wid, hei);

  wid := wid - 1;
  hei := hei - 1;
  bds.x1 := 0;
  bds.y1 := 0;

  // set the width by subtracting the wider interface of either the minimap or open gametabs area
  if (minimap.x <= gametabs.visibleTabArea.x1) then
    bds.x2 := (wid - minimap.w)
  else
    bds.x2 := (wid - gametabs.visibleTabArea.getWidth());

  bds.y2 := (actionbar.y);

  if (actionbar.y = 0) then // if it's at the top
    bds.y1 := actionbar.h
  else
    bds.y1 := 0;

  self.setBounds(bds);

  print('TRSMainscreen.__find(): Set mainscreen bounds based on the other visible interfaces', TDebug.SUB);
end;
{$ENDIF}

(*
TRSMainscreen.setAngle
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSMainscreen.setAngle(angle: integer);

Sets the mainscreen at highest\lowest angle, dependant on constant passed.

.. note::

    - by Raymond, edit by Naum
    - Last Updated: 10 May 2013 by Coh3n

Example:

.. code-block:: pascal

    // make the camera the highest
    setAngle(MS_ANGLE_HIGH);
*)
procedure TRSMainscreen.setAngle(angle: integer);
begin
  if (angle = MS_ANGLE_NONE) then
    exit;

  keyDown((angle * 2) + 38);
  sleep(1000 + random(300));
  keyUp((angle * 2) + 38);
  wait(500 + random(100));
end;

(*
TRSMainscreen.findObject
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.findObject(var x, y: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_NONE): boolean;

A very general object finding function.  Will find and click an object in the specified box.
Will click ONLY the closest object to the player, no others that may be in the same area.
It is suggested to use this function on a very distint object.  In other words, use this
function only when there aren't similar colors to the object in the same area.

    * x, y: The coordinates of the object if found.
    * cols: The colors to be found.
    * tols: The tolerances on 'cols'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * sortFrom: Sorts the TPA, starting with the point closest to this point.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * mouseOverText: The uptext of the object.
    * searchBox: The area to search in.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    - by Wizzup?, Torrent Of Flame & Coh3n
    - Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.findObject(x, y, [123457, 897637], [5, 10], colorSetting(2, 0.02, 0.13), mainscreen.getCenterPoint(), 50, 25, 40, ['Tree'], mainscreen.getBounds(), MOUSE_RIGHT)) then
      writeln('Right-clicked object!');
*)
function TRSMainscreen.findObject(var x, y: integer; cols, tols: TIntegerArray; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; searchBox: TBox; mouseAction: integer = MOUSE_NONE): boolean;
var
  i, l: integer;
  myPoint: TPoint;
  aPoints: T2DPointArray;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  cs: TColorSettings;
begin
  result := false;
  print('TRSMainscreen.findObject()', TDebug.HEADER);

  cs.retrieve();
  colSettings.apply();
  l := length(cols);

  setLength(ATPA, l);

  for i := 0 to (l - 1) do
    findColorsSpiralTolerance(x, y, ATPA[i], cols[i], searchBox, tols[i], colSettings);

  cs.apply();

  TPA := ATPA.merge();
  if (length(TPA) <= 0) then
  begin
    print('No colors found');
    print('TRSMainscreen.findObject(): False', TDebug.FOOTER);
    exit(false);
  end;

  print('Colors found: '+toStr(length(TPA)));

  aPoints := TPA.toATPA(objWidth, objHeight);
  aPoints.filterBetween(0, minCount); // removes objects that don't have enough colors
  print('Possible objects found: '+toStr(length(aPoints)));

  aPoints.sortFromFirstPoint(sortFrom);

  // loop through each possible object
  for i := 0 to high(aPoints) do
  begin
    myPoint := aPoints[i].getMiddle();
    mouse(myPoint.rand(randomRange(-5, 5)), MOUSE_MOVE);

    if (isMouseOverText(mouseOverText)) then
    begin
      getMousePos(x, y);
      mouse(point(x, y), mouseAction);

      print('Successfully mouse''d object');
      result := true;
      break;
    end;
  end;

  print('TRSMainscreen.findObject(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSMainscreen.findObject; overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSMainscreen.findObject(var x, y: integer; col, tol: integer; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_NONE): boolean; overload;

A very general object finding function.  Will find and mouse an object in the mainscreen.

    * x, y: The coordinates of the object if found.
    * col: The color to be found.
    * tol: The tolerance on 'col'.
    * colSettings: The color settings (i.e. color tolerance speed and modifiers). See lib/utilities/color.simba.
    * sortFrom: Sorts the TPA, starting with the point closest to this point.
    * objWidth: The width (in pixels) of the object you're trying to find.
    * objHeight: The height (in pixels) of the object you're trying to find.
    * minCount: The minimum number of colors to be found on a single object.
    * mouseOverText: The uptext of the object.
    * mouseAction: The action of the mouse. Default MOUSE_LEFT.

.. note::

    - by Wizzup? & Torrent Of Flame
    - Last Updated: 30 May 2013 by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.findObject(x, y, 123457, 10, colorSetting(2, 0.02, 0.13), mainscreen.getCenterPoint(), 50, 25, 40, ['ake'])) then
      writeln('Clicked object!');
*)
function TRSMainscreen.findObject(var x, y: integer; col, tol: integer; colSettings: TColorSettings; sortFrom: TPoint; objWidth, objHeight, minCount: integer; mouseOverText: TStringArray; mouseAction: integer = MOUSE_NONE): boolean; overload;
begin
  result := self.findObject(x, y, [col], [tol], colSettings, sortFrom, objWidth, objHeight, minCount, mouseOverText, self.getBounds(), mouseAction);
end;

{$IFNDEF CODEINSIGHT}
function __findMainscreen(): boolean;
begin
  result := mainscreen.__find();
end;
{$ENDIF}

{$f+} // needed so mainscreen.__find isn't called when assigned

begin
  mainscreen.__init();
  __interfaceFindFunctions[mainscreen.ID] := @__findMainscreen;
end;

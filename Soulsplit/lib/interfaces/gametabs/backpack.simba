(*
Backpack
========

The Backpack file holds functions and procedures that are used in the
Runescape Backpack gametab.

*)

{$include_once gametab.simba}
{$include_once ../../misc/items.simba}

{$f-}

(*
const Backpack low/high
~~~~~~~~~~~~~~~~~~~~~~~

Integer constants that represent the highest and lowest Backpack slots.

*)
const
  BACKPACK_SLOT_LOW = 1;
  BACKPACK_SLOT_HIGH = 28;

(*
const Drop Patterns
~~~~~~~~~~~~~~~~~~~

TIntegerArray constants that represent drop patterns.

*)
const
  DROP_PATTERN_REGULAR:   TIntegerArray = [1..28];
  DROP_PATTERN_BACKWARDS: TIntegerArray = [28..1];
  DROP_PATTERN_SNAKE:     TIntegerArray = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16, 21, 22, 23, 24, 25, 28, 27, 26];
  DROP_PATTERN_UP_DOWN:   TIntegerArray = [1, 6, 11, 16, 21, 26, 2, 7, 12, 17, 22, 27, 3, 8, 13, 18, 23, 28, 4, 9, 14, 19, 24, 5, 10, 15, 20, 25];

(*
const Quick Inventory
~~~~~~~~~~~~~~~~~~~~~

Constants that represent the quick inventory slots.

*)
const
  QUICK_INVENTORY_A = 50;  {red}
  QUICK_INVENTORY_B = 100;  {blue}

(*
type TRSTabBackpack
~~~~~~~~~~~~~~~~~~~

A type that stores functions and properties of the Runescape Backpack tab.

*)
type
  TRSTabBackpack = record(TRSInterface)
    tabIndex: integer;
    slots: TBoxArray;
    __slots: array [0..1] of TBoxArray;
    areSlotsLoaded: boolean;
  end;

(*
var tabBackpack
~~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape Backpack tab.

*)
var
  tabBackpack: TRSTabBackpack;

{*
TRSTabBackpack.__init
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSTabBackpack.__init();

Initiates the tabBackpack variable. Called at the end of this file.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

    tabBackpack.__init();

*}
{$IFNDEF CODEINSIGHT}
procedure TRSTabBackpack.__init();
begin
  with self do
  begin
    name := 'RS Backpack tab';
    ID := ID_INTERFACE_TAB_BACKPACK;
    tabIndex := TAB_BACKPACK;
    parentID := -1;
    static := true;
    areSlotsLoaded := false;
  end;
end;
{$ENDIF}

{*
TRSTabBackPack._updateBounds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSTabBackPack._updateBounds();

Updates the bounds and the slots of the tab Backpack, this is needed because
the user could only have one tab open or more.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

    if (tabBackpack.isOpen()) then
      writeln('the Backpack tab is open');
*}
procedure TRSTabBackPack._updateBounds();
begin
  self.setBounds(gameTabs.visibleTabArea);

  // heck, lets save ourself some math... load them once
  if (not self.areSlotsLoaded) then
  begin
    __slots[0] := grid(5, 6, 34, 31, 43, 36,
                      point(gameTabs.__visibleTabAreaMulti.x1 + 27,
                            gameTabs.__visibleTabAreaMulti.y1 + 26));

    __slots[1] := grid(5, 6, 34, 31, 43, 36,
                       point(gameTabs.__visibleTabAreaSingle.x1 + 27,
                             gameTabs.__visibleTabAreaSingle.y1 + 22));

    setLength(__slots[0], 28);
    setLength(__slots[1], 28);

    print('tabBackpack._updateBounds(): Loaded slot arrays');
    self.areSlotsLoaded := true;
  end;

  if (self.y = gameTabs.__visibleTabAreaMulti.y1) then
    slots := __slots[0]
  else
    slots := __slots[1];
end;

(*
TRSTabBackpack.isOpen
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.open(): boolean;

Returns true if our current tab is the Backpack tab, will also check if the
Backpack tab is the only tab open.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

    if (tabBackpack.isOpen()) then
      writeln('the Backpack tab is open');
*)
function TRSTabBackpack.isOpen(): boolean;
var
  b: TBox;
  p: TPoint;
  i: integer;
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  result := (gameTabs._isTabActive(self.tabIndex));

  if (not result) then
    if (gameTabs.findX(p)) then
    begin
      // box around where the money pouch should be (based on the X point)
      b := [p.x -150, p.y +300, p.x -100, p.y +380];

      // gold color on the top of the coins @ the money pouch.
      if (findColorsTolerance(tpa, 9361657, b, 15)) then
      begin
        atpa := tpa.split(5, 10);

        for i := 0 to high(atpa) do
          if (length(atpa[i]) < 20) then
            continue
          else begin
            // result = distance between the point, and the middle of the atpa is close to 360.
            result := (inRange(distance(p, atpa[i].getMiddle()), 350, 370));

            if (result) then
              exit;
          end;
      end;
    end;

  if (not result) then
    print('tabBackpack.isOpen(): Tab is not open', TDebug.WARNING);
end;

(*
TRSTabBackpack.open
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.open(): boolean;

Opens the Backpack tab if we're currently not on it.

.. note::

    - by Olly
    - Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

    if (tabBackpack.open()) then
      writeln('We opened the Backpack tab');
*)
function TRSTabBackpack.open(): boolean;
begin
  result := self.isOpen();

  if (not result) then
    result := gameTabs.openTab(self.tabIndex);

  if (result) then
    self._updateBounds();
end;

(*
TRSTabBackpack.isSlotVaild
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.isSlotVaild(slot: integer): boolean;

Returns true if the vaild (within the range of 1..28).

.. note::

    - by Olly
    - Last Updated: July. 27, 2013

Example:

.. code-block:: pascal

    if (tabBackPack.isSlotValid(25) then
      writeln('Slot 25 is a vaild backpack slot!');

*)
function TRSTabBackpack.isSlotVaild(slot: integer): boolean;
begin
  result := (inRange(slot, BACKPACK_SLOT_LOW, BACKPACK_SLOT_HIGH));

  if (not result) then
    print('tabBackpack(): The slot "' + intToStr(slot) + '" is an incorrect slot. Use a slot between 1..28', TDebug.ERROR);
end;

(*
TRSTabBackpack.getSlotBox
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.getSlotBox(slot: integer): tbox;

Returns the TBox of the desired backpack slot.

.. note::

    - by Olly
    - Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   var
     b: TBox;
   begin
     b := tabBackpack.getSlotBox(1);

*)
function TRSTabBackpack.getSlotBox(slot: integer): TBox;
begin
  if (not self.isSlotVaild(slot)) then
    exit(intToBox(-1, -1, -1, -1));

  if (length(self.slots) <= 0) then
    self._updateBounds();

  // - 1 because the grid (array) starts at 0.
  result := self.slots[slot - 1];
end;

(*
TRSTabBackpack.isItemInSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.isItemInSlot(slot: integer): boolean;

Returns true if an item is in the desired Backpack slot, works by looking for
the black outline color in the slot.

.. note::

    - by Olly
    - Last Updated: 18 August 2013 by Olly

Example:

.. code-block:: pascal

   if (tabBackpack.isItemInSlot(1)) then
     writeln('We have an item in slot number 1');

*)
function TRSTabBackpack.isItemInSlot(slot: integer): boolean;
begin
  if (not self.open()) or (not self.isSlotVaild(slot))then
    exit(false);

  result := isItemIn(self.getSlotBox(slot));
end;

(*
TRSTabBackpack.pointToSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.pointToSlot(p: TPoint): integer;

Returns the slot number where point "p" falls within, if fails to fall in any
slot will return -1.

.. note::

    - by Olly
    - Last Updated: 18 August 2013 by Olly

Example:

.. code-block:: pascal

   writeln('Our point is in slot: ' + toStr(tabBackpack.pointToSlot(point(600, 500))));
*)
function TRSTabBackpack.pointToSlot(p: TPoint): integer;
var
  i: integer;
begin
  result := -1;

  if (not pointInBox(p, self.getBounds())) then
    exit();

  for i := BACKPACK_SLOT_LOW to BACKPACK_SLOT_HIGH do
    if pointInBox(p, self.getSlotBox(i)) then
      exit(i);
end;

(*
TRSTabBackpack.count
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.count(): integer;

Returns how many items are in our Backpack.

.. note::

    - by Olly
    - Last Updated: 18 August 2013 by Olly

Example:

.. code-block:: pascal

   writeln(tabBackpack.count());
*)
function TRSTabBackpack.count(): integer;
var
  i: integer;
begin
  result := 0;

  if (not self.open()) then
    exit();

  for i := BACKPACK_SLOT_LOW to BACKPACK_SLOT_HIGH do
    if (self.isItemInSlot(i)) then
      inc(result);
end;

(*
TRSTabBackpack.waitCount
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.waitCount(backPackCount: integer; waitTime: integer): boolean;

Waits 'waitTime' for the backPack count to become 'count'.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

   if tabBackpack.waitCount(28, 1000 + random(500)) then
     writeln('Backpack count is now 28!');
*)
function TRSTabBackpack.waitCount(backPackCount: integer; waitTime: integer): boolean;
var
  timeOut: integer;
begin
  timeOut := getSystemTime() + waitTime;
  result := false;

  while (timeOut >= getSystemTime()) do
    if (self.count() = backPackCount) then
      exit(true)
    else
      wait(20 + random(50));
end;

(*
TRSTabBackpack.isFull
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.isFull: boolean;

Returns true if our Backpack is full.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

   if (tabBackpack.isFull) then
     writeln('our Backpack is full!');

*)
function TRSTabBackpack.isFull: boolean;
var
  i: integer;
begin
  if (not self.open()) then
    exit(false);

  for i := BACKPACK_SLOT_LOW to BACKPACK_SLOT_HIGH do
    if (not (self.isItemInSlot(i))) then
      exit(false);

  result := true;
end;

(*
TRSTabBackpack.isEmpty
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.isEmpty: boolean;

Returns true if our Backpack is empty.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

   if (tabBackpack.isEmpty) then
     writeln('our Backpack is empty!');

*)
function TRSTabBackpack.isEmpty: boolean;
begin
  if (not self.open()) then
    exit(false);

  result := (not (self.getBounds().colorExists(ITEM_OUTLINE_BLACK)));
end;


(*
TRSTabBackpack.waitForShift
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackPack.waitForShift(waitTime: integer): boolean;

Waits up to waitTime for the Backpack count to change.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

   if tabBackpack.waitForShift(5000) then
     writeln('Backpack has shifted!');

*)
function TRSTabBackPack.waitForShift(waitTime: integer): boolean;
var
  c, timeOut: integer;
begin
  result := false;
  c := self.count();
  timeOut := getSystemTime() + waitTime;

  while (timeOut >= getSystemTime()) do
    if (c <> self.count()) then
      exit(true)
    else
      wait(20 + random(50));
end;

(*
TRSTabBackpack.mouseSlot
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.mouseSlot(slot, mouseAction: integer): boolean;

Moves and performs the desired mouse action at the selected Backpack slot.

.. note::

    - by Olly
    - Last Updated: March. 11, 2013

Example:

.. code-block:: pascal

   if tabBackpack.mouseSlot(1, MOUSE_MOVE) then
     writeln('We moved the mouse to Backpack slot 1');

*)
function TRSTabBackpack.mouseSlot(slot, mouseAction: integer): boolean;
begin
  if (not self.open()) or (not self.isSlotVaild(slot)) then
    exit(false);

  result := true;
  mouseBox(self.getSlotBox(slot), mouseAction);
end;

(*
TRSTabBackpack.isSlotActivated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.isSlotActivated(slot: integer): boolean;

Will return true if a desired slot is activated.

.. note::

    - by Olly
    - Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

   if tabBackpack.isSlotActivated(28) then
     writeln('Slot 28 is activated.');

*)
function TRSTabBackpack.isSlotActivated(slot: integer): boolean;
begin
  if (not self.open()) or (not self.isSlotVaild(slot)) then
    exit(false);

  result := self.getSlotBox(slot).colorExists(ITEM_OUTLINE_WHITE);
end;

(*
TRSTabBackpack.getActivatedSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.getActivatedSlot: integer;

Returns what slot is activated, if none are it will return -1.

.. note::

    - by Olly
    - Last Updated: March. 12, 2013

Example:

.. code-block:: pascal

   var
     i: integer;
   begin
     i := getActivatedSlot;

*)
function TRSTabBackpack.getActivatedSlot: integer;
var
  i: integer;
begin
  if (not self.open()) or (not (self.getBounds().colorExists(ITEM_OUTLINE_WHITE))) then
    exit(- 1);

  for i := BACKPACK_SLOT_LOW to BACKPACK_SLOT_HIGH do
    if self.isSlotActivated(i) then
      exit(i);

  result := - 1;
end;

(*
TRSTabBackpack.dropItems
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSTabBackpack.dropItems(slots: TIntegerArray = [1..28]);

Drops items in the TIntegerArray, the parameter slots its optional if untouched
the procedure will drop all items in slots 1 to 28. Can also be used with
drop patterns.
    * tabBackpack.dropItems(); - would drop items in slots 1..28
    * tabBackpack.dropItems([1, 2, 25, 6]); - would drop items in slots 1, 2, 25 and 6
    * tabBackpack.dropItems(DROP_PATTERN_SNAKE);  - would use the drop pattern "snake"

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

    tabBackpack.dropItems();

*)
procedure TRSTabBackpack.dropItems(slotArr: TIntegerArray = DROP_PATTERN_REGULAR);
var
  r, I, l: integer;
  tia: TIntegerArray;
begin
  if (not self.open()) then
    exit;

  l := length(slotArr);

  if (l < 1) then
  begin
    print('dropItems: You didnt enter any slots to drop.', TDebug.ERROR);
    exit;
  end;

  for i := 0 to (l - 1) do
    if (self.isSlotVaild(slotArr[i])) and (self.isItemInSlot(slotArr[i])) then
    begin
      self.mouseSlot(slotArr[i], MOUSE_RIGHT);
      if chooseOption.select(['Drop', 'drop', 'rop']) then
      begin
        insert(slotArr[i], tia);
        wait(120 + random(305));
      end;
    end;

  if (length(tia) > 0) then
  begin
    tia.sortQuick();
    print('dropItems: Dropped items in slots ' + toStr(tia));
  end else
    print('dropItems: Failed finding any items to drop');
end;

(*
TRSTabBackpack.dropItemsExcept
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure tabBackpack.dropItemsExcept(ignoreSlots: TIntegerArray; dropPattern: TIntegerArray = DROP_PATTERN_REGULAR);

Drops all items apart from the slots in 'ignoreSlots', the parameter 'dropPattern' is
optional, and on default is set to 'DROP_PATTERN_REGULAR'.

.. note::

    - by Olly
    - Last Updated: September 13, 2013

Example:

.. code-block:: pascal

    tabBackpack.dropItemsExcept([1]);
*)
procedure TRSTabBackpack.dropItemsExcept(ignoreSlots: TIntegerArray; dropPattern: TIntegerArray = DROP_PATTERN_REGULAR);
var
  arr: TIntegerArray;
  i: integer;
begin
  arr := dropPattern;

  for i := high(arr) downto 0 do
    if (inIntArray(ignoreSlots, arr[i])) then
      arr.deleteIndex(i);

  if (length(arr) > 0) then
    self.dropItems(arr);
end;

(*
TRSTabBackpack.countDTM
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.countDTM(dtm: integer): integer;

Searches for the dtm in each Backpack slot and will return how many matches it finds.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

    var
      dtm: integer;
      i: integer;
    begin
      dtm := dtmFromString('lotsofstuffhere');
      i := tabBackpack.countDTM(dtm);
      writeln('We counted ' + intToStr(i) + ' items in our Backpack.');
    end;
*)
function TRSTabBackpack.countDTM(dtm: integer): integer;
var
  i, l: integer;
begin
  result := 0;

  if (not self.open()) then
    exit();

  result := findItem(dtm, self.slots);

  if (result = 0) then
  begin
    print('tabBackpack.countDTM(): Found no DTM matches', TDebug.SUB);
    exit();
  end;

  print('tabBackpack.countDTM(): Counted ' + intToStr(result) + ' items');
end;

(*
TRSTabBackpack.countBitmap
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.countBitmap(bmp, tolerance: integer): integer;

Searches for the bitmap in each Backpack slot and will return how many matches it finds.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

    var
      bmp: integer;
      i: integer;
    begin
      bmp := bitmapFromString('lotsofstuffhere');
      i := tabBackpack.countBitmap(dtm);
      writeln('We counted ' + intToStr(i) + ' items in our Backpack.');
    end;
*)
function TRSTabBackpack.countBitmap(bmp, tolerance: integer): integer;
begin
  result := 0;

  if (not self.open()) then
    exit();

  result := findItem(bmp, tolerance, self.slots);

  if (result = 0) then
  begin
    print('tabBackpack.countBitmap(): Found no bitmap matches', TDebug.SUB);
    exit();
  end;

  print('tabBackpack.countBitmap(): Counted ' + intToStr(result) + ' items');
end;

(*
TRSTabBackpack.clickDTM
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.clickDTM(dtm: integer; clickType: integer; option: string; waitFor: integer = 300): integer;

Searches for the dtm if succesful will perform what action is it set.
Will return how many items were clicked.
  * clicktype - (MOUSE_MOVE, MOUSE_LEFT, MOUSE_RIGHT)
  * option    - What option to choose. If not using MOUSE_RIGHT can be left blank('').
  * waitFor   - This is how long we will wait after interacting with the item, for
                different things you may need different speeds.

.. note::

    - by Olly
    - Last Updated: July. 29, 2013

Example:

.. code-block:: pascal

    // would search for the dtm and click the item.
    tabBackpack.clickDTM(dtm, MOUSE_LEFT, '');

    // would search for the dtm and wait 1000ms after selecting the option "bury"
    tabBackpack.clickDTM(dtm, MOUSE_RIGHT, 'bury', 1000);

*)
function TRSTabBackpack.clickDTM(dtm: integer; clickType: integer; option: string; waitFor: integer = 300): integer;
var
  i, l: integer;
  arr: TIntegerArray;
begin
  if (not self.open()) then
    exit(0);

  arr := findItem(dtm, self.slots, true);

  l := length(arr);

  if (l < 1) then
  begin
    print('tabBackpack.clickDTM(): Found no dtm matches', TDebug.SUB);
    exit();
  end;

  for i := 0 to (l-1) do
  begin
    self.mouseSlot(i+1, clickType);

    if (clickType = MOUSE_RIGHT) and (option <> '') then
      chooseOption.select([option]);

    inc(result);
    wait(waitFor + random(50));
  end;

  print('clickItemsDTM: clicked ' + intToStr(result) + ' items.');
end;

(*
TRSTabBackpack.dragSlot
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

     function TRSTabBackpack.dragSlot(fromSlot, toSlot: integer): boolean;

.. note::

    - by Olly
    - Last Updated: April. 25, 2013

Example:

.. code-block:: pascal

    tabBackpack.dragSlot(1, 28);

*)
function TRSTabBackpack.dragSlot(fromSlot, toSlot: integer): boolean;
var
  p: TPoint;
begin
  if (self.isItemInSlot(fromSlot)) then
  begin
    mouseSlot(fromSlot, MOUSE_MOVE);
    gaussBox(p, self.getSlotBox(toSlot));

    dragMouse(p);
    result := true;
  end else
    print('There is no item to drag in slot ' + intToStr(fromSlot), TDebug.ERROR);
end;

(*
TRSTabBackpack.getMoneyPouchAmount
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.getMoneyPouchAmount(): integer;

Will return how much money is in the money pouch.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

   i := tabBackpack.getQuickInventorySlot(QUICK_INVENTORY_A);
*)
function TRSTabBackpack.getMoneyPouchAmount(): integer;
var
  b, bounds: TBox;
  tpa: TPointArray;
  colArr: array [0..1] of integer;
  s: string;
  i: integer;
begin
  result := 0;
             { green, white }
  colArr := [65280, 16777215];

  if (not self.open()) then
    exit();

  b := [gameTabs.visibleTabArea.x1, gameTabs.visibleTabArea.y2-32,
        gameTabs.visibleTabArea.x2, gameTabs.visibleTabArea.y2-9];

  for i := 0 to 1 do
    if (findColors(tpa, colArr[i], b)) then
    begin
      bounds := tpa.getBounds();
      bounds.edit(-1, -1, +1, +1);

      s := getTextAtEx(bounds, 0, 4, 4, colArr[i], 1, upChars);

      result := strToIntDef(ExtractFromStr(s, numbers), 0);

      if pos('K', s) > 0 then
        result := result * 1000;

      if pos('M', s) > 0 then
        result := result * 1000000;

      print('tabBackpack.getMoneyPouchAmount(): result = ' + intToStr(result) +
            ' (' + s + ')', TDebug.SUB);
      exit();
    end;

  print('tabBackpack.getMoneyPouchAmount(): Failed to find any text color, resulting as 0', TDebug.ERROR);
end;

(*
TRSTabBackpack.getQuickInventorySlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.getQuickInventorySlot(quickInvConst: integer): integer;

Will return the slot of what slot the "quickInvConst" is binded to.
  * vaild quickInvConsts are QUICK_INVENTORY_A or QUICK_INVENTORY_B.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

   i := tabBackpack.getQuickInventorySlot(QUICK_INVENTORY_A);
*)
function TRSTabBackpack.getQuickInventorySlot(quickInvConst: integer): integer;
var
  i: integer;
  slot: TBox;
  r, g, b: integer;
begin
  result := 0;

  if (not self.open()) then
    exit();

  for i := BACKPACK_SLOT_LOW to BACKPACK_SLOT_HIGH do
  begin
    slot := self.getSlotBox(i);

    colorToRGB(getColor(slot.x2, slot.y1), r, g, b);

    if (quickInvConst = QUICK_INVENTORY_A) and (r > 80) then
    begin
      print('tabBackpack.getQuickInventorySlot(): Found red quick inventory in slot: ' + intToStr(i), TDebug.SUB);
      exit(i);
    end;

    if (quickInvConst = QUICK_INVENTORY_B) and (b > 120) then
    begin
      print('tabBackpack.getQuickInventorySlot(): Found blue quick inventory in slot: ' + intToStr(i), TDebug.SUB);
      exit(i);
    end;
  end;

  print('tabBackpack.getQuickInventorySlot(): Failed to find the quick inventory slot', TDebug.ERROR);
end;

(*
TRSTabBackpack.setQuickInventorySlot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSTabBackpack.setQuickInventorySlot(slot, quickInvConst: integer): boolean;

Will set "slot" as the quick inventory slot based on "quickInvConst"
  * vaild quickInvConsts are QUICK_INVENTORY_A or QUICK_INVENTORY_B.

.. note::

    - by Olly
    - Last Updated: 19 August 2013 by Olly

Example:

.. code-block:: pascal

   if tabBackpack.setQuickInventorySlot(1, QUICK_INVENTORY_A) then
     writeln('slot 1 is now binded to quick inventory a');

*)
function TRSTabBackpack.setQuickInventorySlot(slot, quickInvConst: integer): boolean;
var
  otherID: byte;
  s: string;
begin
  if (getQuickInventorySlot(quickInvConst) = slot) then
    exit(true);

  if (quickInvConst = QUICK_INVENTORY_A) then
  begin
    otherID := QUICK_INVENTORY_B;
    s := 'A';
  end else begin
    otherID := QUICK_INVENTORY_A;
    s := 'B';
  end;

  if (getQuickInventorySlot(otherID) = slot) then
  begin
    print('tabBackpack.setQuickInventorySlot(): Slot ' + intToStr(slot) + ' is already taken by the other quick inventory slot', TDebug.ERROR);
    exit(false);
  end;

  self.mouseSlot(slot, MOUSE_RIGHT);
  result := chooseOption.select(['Set quick-inventory '+ s, 'ventory ' + s], 300);
end;

begin
  tabBackpack.__init();
end;
